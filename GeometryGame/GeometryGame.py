import random
import turtle

# Begin class definitions
class Point(object):
    """
    Class defining a 2D point within a euclidian space.

    Parameters
    ----------
    x : float - x coordinate
    y : float - y coordinate

    Methods
    ----------

    falls_in_rectangle: takes a Rectangle object instance and etermines if the point instance 
        falls within the rectangle instance, returns bool

    
    distance: takes a Point object instance and calculates the distance from the given instance point to 
        the argument point instance, returns float
    """

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def falls_in_rectangle(self, rectangle):
        """
        Given the lower left rectangle vertex coordinates and and the upper right rectangle vertex coordinates, 
        return if the insance point (self.x, self.y) is within the rectangle defined by the lower left and upper 
        right vertices.

        Parameters
        -----------
        rectangle: Rectangle object - contains the Point objects defining the loer left vertex and upper right
        vertex of the rectangle, see Rectangle

        Returns
        -----------
        boolean: True if point is within the defined rectangle, false otherwise

        """
        if (rectangle.firstPoint.x <= self.x <= rectangle.secondPoint.x) \
            & (rectangle.firstPoint.y <= self.y <= rectangle.secondPoint.y):
            return True
        else:
            return False
    
    def distance(self, newPoint):
        """
        Calculate and return the euclidian distance from the instance point (self.x, self.y) to the new point
        (newX, newY)

        Parameters
        -----------
        newPoint: Point object - new point objec coordinates (newPoint.x, newPoint.y) to calculate distance relative to

        Returns
        -----------
        float - distance between instance point and new point

        """
        return ((newPoint.x - self.x)**2 + (newPoint.y - self.y)**2)**0.5

class Rectangle(object):
    """
    Class defining a rectangle in a 2D euclidian space. Rectangle object will be used to define whether or not a user
    defined point object is within the area defined by the rectangle object.

    Parameters
    -----------
    firstPoint: Point object - lower left vertex coordinates of the rectangle (x, y)

    secondPoint: Point object - upper right vertex coordinates of the rectangle (x, y) - see Point

    Methods
    -----------
    area: calculates the area of the Rectangle instance and returns a float

    """

    def __init__(self, firstPoint, secondPoint):
        self.firstPoint = firstPoint
        self.secondPoint = secondPoint

    def area(self,):
        """
        Calculates the area of the Rectangle instance based upon firstPoint and secondPoint
    
        Parameters
        -----------
        None

        Returns
        -----------
        area: float - unitless area of 2D Rectangle object
        """

        return (abs(self.secondPoint.x - self.firstPoint.x) * abs(self.secondPoint.y - self.firstPoint.y))

class GuiRectangle(Rectangle):
    """
    Child class of Rectangle for drawing rectangles using the turtle GUI package.

    Parameters
    -----------
    firstPoint: Point object - lower left vertex coordinates of the rectangle (x, y), inherits from Rectangle

    secondPoint: Point object - upper right vertex coordinates of the rectangle (x, y), inherits from Rectangle


    Methods
    -----------
    draw - Draws a rectangle within a turtle GUI instance. Inherits rectangle dimensions from the Rectangle class.
    """

    def draw(self, canvas):
        """
        Draws the random rectangle within turtle GUI generated by the Rectangle class.

        Parameters
        -----------
        canvas : turtle.Turtle object - GUI interface object generated by turtle to draw rectangle and point on

        Returns
        -----------
        GUI drawing: turtle.Turtle object - GUI interface with drawn random rectangle

        """
        canvas.penup()
        #start at bottom left vertex of rectangle - go around rectangle counter clockwise
        canvas.goto(self.firstPoint.x, self.firstPoint.y)
        canvas.pendown()
        canvas.forward(self.secondPoint.x - self.firstPoint.x)
        canvas.left(90)
        canvas.forward(self.secondPoint.y - self.firstPoint.y)
        canvas.left(90)
        canvas.forward(self.secondPoint.x - self.firstPoint.x)
        canvas.left(90)
        canvas.forward(self.secondPoint.y - self.firstPoint.y)

class GuiPoint(Point):
    """
    Draw user defined guess point on GUI window - see Point class
    
    Parameters
    -----------
    x : float - x coordinate
    y : float - y coordinate

    Methods
    -----------
    draw - Draws a point within a turtle GUI instance. Inherits point coordinates from the Point class.
    """

    def draw(self, canvas, size=10, color='red'):
        """
        Draws the user guess point within turtle GUI generated by the Point class.

        Parameters
        -----------
        canvas : turtle.Turtle object - GUI interface object generated by turtle to draw rectangle and point on

        size : int - size of point to be drawn using turtle dot method

        color : str - color of point to be drawn using turtle dot method

        Returns
        -----------
        GUI drawing: turtle.Turtle object - GUI interface with drawn guessed point

        """
        canvas.penup()
        canvas.goto(self.x, self.y)
        canvas.pendown()
        canvas.dot(size, color)

### Implementation of Command Line Game

# Generate Random Rectangle by generating random two points
randPoint1 = Point(random.uniform(0,50), random.uniform(0,50))
randPoint2 = Point(random.uniform(75,200), random.uniform(75,200))
rectangle = GuiRectangle(randPoint1, randPoint2)

#Print out the Rectangle Coordinates
print("\n*** WELCOME TO THE RECTANGLE GUESSING GAME ***\n")
print("Rectangle vertices coordinates: {}, {} and {}, {}\n".format(rectangle.firstPoint.x, rectangle.firstPoint.y, 
    rectangle.secondPoint.x, rectangle.secondPoint.y))

#Ask for User Input to Guess Point Within Rectangle
print("Guess point coordinates within the rectangle")
userPoint = GuiPoint(float(input("Guess X: ")), float(input("Guess Y: ")))

#Ask User to Guess Area of Rectangle
userArea = float(input("Guess the rectangle area: "))

#Report User Results
print("Was your point guess within the rectangle?", userPoint.falls_in_rectangle(rectangle=rectangle))
print("Your rectangle area guess was off by:", rectangle.area() - userArea)

# Draw GUI canvas
myTurtle = turtle.Turtle()
rectangle.draw(canvas=myTurtle)
userPoint.draw(canvas=myTurtle)
turtle.done()